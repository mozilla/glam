version: 2.1

jobs:
  build:
    docker:
      - image: docker:stable-git
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASSWORD
    working_directory: /dockerflow
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Create a version.json
          command: |
            # create a version.json per https://github.com/mozilla-services/Dockerflow/blob/main/docs/version_object.md
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json
      - run:
          name: Build Docker images for $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
          command: |
            docker build --target frontend -t app-frontend:build .
            docker build -t app:build .
      - run:
          name: docker save
          command: |
            mkdir -p /cache
            docker save -o /cache/app-frontend.tar "app-frontend:build"
            docker save -o /cache/app.tar "app:build"
      - save_cache:
          key: v1-{{ .Environment.CIRCLE_SHA1 }}-{{epoch}}
          paths:
            - /cache/app-frontend.tar
            - /cache/app.tar

  frontend-tests:
    docker:
      - image: docker:18.02.0-ce
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASSWORD
    steps:
      - setup_remote_docker
      - restore_cache:
          key: v1-{{.Environment.CIRCLE_SHA1}}
      - run:
          name: Restore Docker image cache
          command: docker load -i /cache/app-frontend.tar
      - run:
          name: Test Frontend (JS) Code
          command: docker run app-frontend:build

  backend-tests:
    docker:
      - image: docker:18.02.0-ce
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASSWORD
        environment:
          DJANGO_CONFIGURATION: Test
          DATABASE_URL: postgresql://postgres:pass@postgres/test?sslmode=disable
      - image: circleci/postgres:11
        name: postgres
        environment:
          POSTGRES_DB: test
          POSTGRES_PASSWORD: pass
    steps:
      - setup_remote_docker
      - restore_cache:
          key: v1-{{.Environment.CIRCLE_SHA1}}
      - run:
          name: Restore Docker image cache
          command: docker load -i /cache/app.tar
      - run:
          name: Lint Python Code
          command: |
            docker run app:build python3 -m flake8 --max-line-length 100 /app
            docker run --env DJANGO_CONFIGURATION=${DJANGO_CONFIGURATION} --env DATABASE_URL=${DATABASE_URL} app:build python3 -m black --check glam .
      - run:
          name: Test Python Code
          command: |
            docker run apt-get update && apt-get install make
            docker run app:build make test /app/glam/

  test-environment:
    docker:
      - image: cimg/base:2021.10
    working_directory: ~/mozilla/glam/
    steps:
      - checkout
      - run:
          command: | # bind {PWD} because we use it in docker-compose.yml
            cp .env-dist .env
            make build -v ${PWD}:/app

  deploy:
    docker:
      - image: docker:18.02.0-ce
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASSWORD
    steps:
      - setup_remote_docker
      - restore_cache:
          key: v1-{{.Environment.CIRCLE_SHA1}}
      - run:
          name: Restore Docker image cache
          command: docker load -i /cache/app.tar
      - run:
          name: Login to Dockerhub
          command: |
            echo "${DOCKER_PASSWORD}" | docker login -u="${DOCKER_USER}" --password-stdin
      - run:
          name: Deploy to Dockerhub
          command: |
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              docker tag app:build ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}:latest
              docker tag app:build ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}
            elif  [ ! -z "${CIRCLE_TAG}" ]; then
              echo "${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}"
              docker tag app:build "${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}"
            fi
            docker images
            docker push ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - frontend-tests:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - backend-tests:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - test-environment:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - frontend-tests
            - backend-tests
            - test-environment
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/
            branches:
              only: main
