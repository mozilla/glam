version: 2.1

orbs:
  gcp-cli: circleci/gcp-cli@3.1.1
  gcp-gcr: circleci/gcp-gcr@0.16.7

jobs:
  build:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Create a version.json
          command: |
            # create a version.json per https://github.com/mozilla-services/Dockerflow/blob/main/docs/version_object.md
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json
      - run:
          name:
            Build Docker images for
            $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
          command: |
            docker build --target frontend -t app-frontend:build .
            docker build -t app:build .
      - run:
          name: docker save
          command: |
            mkdir -p /tmp/cache
            docker save -o /tmp/cache/app-frontend.tar "app-frontend:build"
            docker save -o /tmp/cache/app.tar "app:build"
      - save_cache:
          key: v1-{{ .Environment.CIRCLE_SHA1 }}-{{epoch}}
          paths:
            - /tmp/cache/app-frontend.tar
            - /tmp/cache/app.tar

  frontend-tests:
    docker:
      - image: cimg/base:stable
    steps:
      - setup_remote_docker
      - restore_cache:
          key: v1-{{.Environment.CIRCLE_SHA1}}
      - run:
          name: Restore Docker image cache
          command: docker load -i /tmp/cache/app-frontend.tar
      - run:
          name: Test Frontend (JS) Code
          command: docker run app-frontend:build

  backend-tests:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          key: v1-{{.Environment.CIRCLE_SHA1}}
      - run:
          name: Restore Docker image cache
          command: docker load -i /tmp/cache/app.tar
      - run:
          name: Lint Python Code
          command:
            docker-compose -f docker-compose.test.yml run --rm server make lint
      - run:
          name: Test Python Code
          command:
            docker-compose -f docker-compose.test.yml run --rm server pytest
            --dc=Test /app/glam/

  test-environment:
    docker:
      - image: cimg/base:stable
    working_directory: ~/mozilla/glam/
    steps:
      - checkout
      - run:
          command: | # bind {PWD} because we use it in docker-compose.yml
            cp .env-dist .env
            make build -v ${PWD}:/app

  deploy:
    docker:
      - image: cimg/base:stable
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASSWORD
    steps:
      - setup_remote_docker
      - restore_cache:
          key: v1-{{.Environment.CIRCLE_SHA1}}
      - run:
          name: Restore Docker image cache
          command: docker load -i /tmp/cache/app.tar
      - run: # TODO: remove this step after migration
          name: Login to Dockerhub
          command: |
            echo "${DOCKER_PASSWORD}" | docker login -u="${DOCKER_USER}" --password-stdin
      - run: # TODO: remove this step after migration
          name: Deploy to Dockerhub
          command: |
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              # tag the CI-built docker image with latest & the latest git commit SHA
              docker tag app:build ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}:latest
              docker tag app:build ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}
              docker push ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}:latest
              docker push ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}
            elif  [ ! -z "${CIRCLE_TAG}" ]; then
              # tag the CI-built docker image with the Git Release or CircleCI Tag (they are the same thing)
              docker tag app:build "${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}"
              docker push ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}
            fi
      - run:
          name: Prepare environment variables for OIDC authentication
          command: |
            echo 'export GOOGLE_PROJECT_ID="moz-fx-glam-prod"' >> "$BASH_ENV"
            echo "export OIDC_WIP_ID=$GCPV2_WORKLOAD_IDENTITY_POOL_ID" >> "$BASH_ENV"
            echo "export OIDC_WIP_PROVIDER_ID=$GCPV2_CIRCLECI_WORKLOAD_IDENTITY_PROVIDER" >> "$BASH_ENV"
            echo "export GOOGLE_PROJECT_NUMBER=$GCPV2_WORKLOAD_IDENTITY_POOL_PROJECT_NUMBER" >> "$BASH_ENV"
            echo "export OIDC_SERVICE_ACCOUNT_EMAIL=$GCP_SERVICE_ACCOUNT_EMAIL" >> "$BASH_ENV"
      - gcp-cli/setup:
          use_oidc: true
      - run:
          name: Deploy to Google Artifact Registry
          command: |
            DOCKER_IMAGE="us-docker.pkg.dev/moz-fx-glam-prod/glam-prod/glam"
            docker tag app:build "${DOCKER_IMAGE}:${CIRCLE_SHA1}"
            docker tag app:build "${DOCKER_IMAGE}:${CIRCLE_BRANCH}"
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              # tag the CI-built docker image with latest & the latest git commit SHA
              docker tag "${DOCKER_IMAGE}:${CIRCLE_SHA1}" "${DOCKER_IMAGE}:latest"
            elif  [ ! -z "${CIRCLE_TAG}" ]; then
              # tag the CI-built docker image with the Git Release or CircleCI Tag (they are the same thing)
              docker tag "${DOCKER_IMAGE}:${CIRCLE_SHA1}" "${DOCKER_IMAGE}:${CIRCLE_TAG}"
            fi
            # push all tags associated with the image
            docker push -a "${DOCKER_IMAGE}:${CIRCLE_SHA1}"

  proxy-build-and-publish: # TODO move this to shared openresty repo
    executor: gcp-gcr/default
    environment:
      GOOGLE_PROJECT_ID: moz-fx-dataops-images-global
      GLAM_PROJECT_ID: moz-fx-glam-prod
    steps:
      - checkout
      - gcp-gcr/gcr-auth

      - run:
          name: Generate build version.json
          command: >
            printf
            '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n'
            "$CIRCLE_SHA1" "$CIRCLE_TAG" "$CIRCLE_PROJECT_USERNAME"
            "$CIRCLE_PROJECT_REPONAME" "$CIRCLE_BUILD_URL" > version.json
      - run:
          name: Output version.json
          command: cat version.json
      - gcp-gcr/build-image:
          workspace-root: dockerfiles/proxy
          path: dockerfiles/proxy
          docker-context: dockerfiles/proxy
          image: auth0-proxy
          tag: $CIRCLE_TAG
          registry-url: gcr.io
      - gcp-gcr/push-image:
          image: auth0-proxy
          registry-url: gcr.io
          tag: $CIRCLE_TAG
          google-project-id: GOOGLE_PROJECT_ID

      # this could be done by re-tagging the existing image but for ease of migration
      # I'm duplicating it fully with the intent of removing the above steps entirely
      # /moz-fx-glam-prod/glam-prod/glam@sha256:705f53c5511c5803c6ea58896a93a97a30dc8defdef19c5d2243c3171a13be25
      - run:
          name: Prepare environment variables for OIDC authentication
          command: |
            echo 'export GOOGLE_PROJECT_ID="moz-fx-experimenter-prod-6cd5"' >> "$BASH_ENV"
            echo "export OIDC_WIP_ID=$GCPV2_WORKLOAD_IDENTITY_POOL_ID" >> "$BASH_ENV"
            echo "export OIDC_WIP_PROVIDER_ID=$GCPV2_CIRCLECI_WORKLOAD_IDENTITY_PROVIDER" >> "$BASH_ENV"
            echo "export GOOGLE_PROJECT_NUMBER=$GCPV2_WORKLOAD_IDENTITY_POOL_PROJECT_NUMBER" >> "$BASH_ENV"
            echo "export OIDC_SERVICE_ACCOUNT_EMAIL=$GCP_SERVICE_ACCOUNT_EMAIL" >> "$BASH_ENV"

      - gcp-cli/setup:
          use_oidc: true

      - gcp-gcr/build-image:
          workspace-root: dockerfiles/proxy
          path: dockerfiles/proxy
          docker-context: dockerfiles/proxy
          registry-url: us-docker.pkg.dev
          google-project-id: GLAM_PROJECT_ID
          repository: glam-prod
          image: auth0-proxy
          tag: $CIRCLE_SHA1

      - gcp-gcr/push-image:
          registry-url: us-docker.pkg.dev
          google-project-id: GLAM_PROJECT_ID
          repository: glam-prod
          image: auth0-proxy
          tag: $CIRCLE_SHA1

  proxy-rollback-auth:
    executor: gcp-gcr/default
    environment:
      GOOGLE_PROJECT_ID: moz-fx-dataops-images-global
    steps:
      - gcp-gcr/gcr-auth
      - gcp-gcr/tag-image:
          image: auth0-proxy
          registry-url: gcr.io
          source-tag: 0.0.4
          target-tag: authproxy-dev
          google-project-id: GOOGLE_PROJECT_ID

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - frontend-tests:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - backend-tests:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - test-environment:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - frontend-tests
            - backend-tests
            - test-environment
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/
            branches:
              only: main
  proxy-build-and-publish:
    jobs:
      - proxy-build-and-publish:
          filters:
            tags:
              only: /^authproxy.*/
            branches:
              ignore: /.*/

  proxy-rollback-auth:
    jobs:
      - proxy-rollback-auth:
          filters:
            tags:
              only: /^rollback-authproxy.*/
            branches:
              ignore: /.*/
