-- Query auto-generated by GLAM
-- For more info on tables referenced in this query see:
-- https://dictionary.telemetry.mozilla.org/apps/fenix/pings/metrics

CREATE TEMP FUNCTION hist_sum(entries ANY TYPE) AS (
  ARRAY(SELECT AS STRUCT key, CAST(SUM(value) AS FLOAT64) AS value FROM UNNEST(entries) GROUP BY key ORDER BY key)
);

WITH sampled_pre_aggregates AS (
  SELECT
    MOD(sample_id, 10) AS sample_group,
    hist_sum(
      ARRAY_CONCAT_AGG(metrics.${metric_type}.${metric_name}.values)
    ) AS summed_aggregates,
    "${metric_type}" AS metric_type,
    COALESCE(
      SAFE_CAST(SPLIT(client_info.app_display_version, '.')[OFFSET(0)] AS INT64),
      0
    ) AS app_version,
    mozfun.glam.fenix_build_to_build_hour(client_info.app_build) AS app_build_id,
    COUNT(distinct client_info.client_id) AS client_count
  FROM
    `moz-fx-data-shared-prod.org_mozilla_fenix.metrics` -- Currently only supports Metrics ping
  WHERE
    DATE(submission_timestamp) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY) AND CURRENT_DATE
    AND client_info.os = "Android"
    AND client_info.client_id IS NOT NULL
    AND mozfun.norm.fenix_app_info('org_mozilla_fenix', client_info.app_build).channel = "${channel}"
    AND sample_id BETWEEN 0 AND ${sample_size}
    AND metrics.${metric_type}.${metric_name}.values IS NOT NULL
  GROUP BY metric_type, app_version, app_build_id, sample_group
),

combined_pre_aggregates AS (
  SELECT
    <% if (normalized) { %>mozfun.glam.histogram_normalized_sum(
      ARRAY_CONCAT_AGG(summed_aggregates),
      ${sample_mult}
    ) AS aggregates,<% } else { %>hist_sum(
      ARRAY_CONCAT_AGG(summed_aggregates)
    ) AS aggregates,<% } %>
        metric_type,
    app_version,
    app_build_id,
    SUM(client_count) AS client_count
FROM
  sampled_pre_aggregates
WHERE
  SUBSTR(app_build_id, 0, 10) >= FORMAT_DATE("%Y%m%d", DATE_SUB(CURRENT_DATE, INTERVAL 14 DAY))
GROUP BY metric_type, app_version, app_build_id
),
percentiles_agg AS (
  SELECT
    app_version,
    app_build_id,
    client_count,
    ARRAY<STRUCT<percentile STRING, value FLOAT64>>[
      ('0.1', mozfun.glam.percentile(0.1, aggregates, metric_type)),
      ('1', mozfun.glam.percentile(1, aggregates, metric_type)),
      ('5', mozfun.glam.percentile(5, aggregates, metric_type)),
      ('25', mozfun.glam.percentile(25, aggregates, metric_type)),
      ('50', mozfun.glam.percentile(50, aggregates, metric_type)),
      ('75', mozfun.glam.percentile(75, aggregates, metric_type)),
      ('95', mozfun.glam.percentile(95, aggregates, metric_type)),
      ('99', mozfun.glam.percentile(99, aggregates, metric_type)),
      ('99.9', mozfun.glam.percentile(99.9, aggregates, metric_type))
      ] AS percentiles
  FROM combined_pre_aggregates
)
  SELECT
    app_build_id AS build_id,
    client_count,
    percentile,
    value
  FROM percentiles_agg, UNNEST(percentiles)
  ORDER BY app_build_id ASC
